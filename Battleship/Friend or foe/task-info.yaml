type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Player.java
  visible: true
  text: |+
    package battleship;

    import java.util.Scanner;

    public class Player1 extends BaseEntity{
        public Player1() {
            this.x1=-1;
            this.x2=-1;
            this.y1=-1;
            this.y2=-1;
            this.playBoard =new char[10][10];
            this.fogPlayBoard =new char[10][10];
            this.shipSinkBoard =new char[10][10];
            this.coordinates=coordinates;
            this.scanner = new Scanner(System.in);
            this.usedA = true;
            this.usedB = true;
            this.usedC = true;
            this.usedD = true;
            this.usedE = true;
            this.gameFinished = false;
        }

         int x1=-1;
         int x2=-1;
         int y1=-1;
         int y2=-1;
         char [][] playBoard =new char[10][10];
         char [][] fogPlayBoard =new char[10][10];
         char [][] shipSinkBoard =new char[10][10];
         int [] coordinates={x1,y1,x2,y2};
         Scanner scanner = new Scanner(System.in);
         boolean usedA = true;
         boolean usedB = true;
         boolean usedC = true;
         boolean usedD = true;
         boolean usedE = true;
         boolean gameFinished = false;

        public   boolean checkLength(int [] coordinates, int l){
            x1=coordinates[0];
            y1=coordinates[1];
            x2=coordinates[2];
            y2=coordinates[3];
            if(x1-x2==l||y1-y2==l||x2-x1==l||y2-y1==l)
                return true;
            else return false;
        }
        public boolean checkShip(char[][] shipSinkBoard) {
            int countA=0;
            int countB=0;
            int countC=0;
            int countD=0;
            int countE=0;
            boolean result=true;
            for(int i=0;i<10;i++) {
                for (int j = 0; j < 10; j++) {
                    if(shipSinkBoard[i][j]=='A'){
                        countA++;}
                    else if(shipSinkBoard[i][j]=='B'){
                        countB++;}
                    else if(shipSinkBoard[i][j]=='C'){
                        countC++;}
                    else if(shipSinkBoard[i][j]=='D'){
                        countD++;}
                    else if(shipSinkBoard[i][j]=='E'){
                        countE++; }
                }
            }
            if(countA==0&&usedA) {
                result = false;
                usedA = false;
            } else if (countB==0&&usedB) {
                result = false;
                usedB = false;
            }else if (countC==0&&usedC) {
                result = false;
                usedC = false;
            }else if (countD==0&&usedD) {
                result = false;
                usedD = false;
            }else if (countE==0&&usedE) {
                result = false;
                usedE = false;
            }
            if (countA==0&&countB==0&&countC==0&&countD==0&&countE==0)
                gameFinished=true;
            return !result;
        }
        public void createFogPlayBoard(char[][] fogPlayBoard) {
            for(int i=0;i<10;i++) {
                for (int j = 0; j < 10; j++) {
                    fogPlayBoard[i][j]='~';
                }
            }
        }

        public void checkShot(char[][] playBoard) {
            int x,y;
            do {
                String shotCoordinates = scanner.next();
                x = Character.getNumericValue(shotCoordinates.charAt(0)) - 9;
                y = Integer.parseInt(shotCoordinates.substring(1));
            } while (x < 1 || x > 10 || y < 1 || y > 10);
            for(int i=0;i<10;i++) {
                for (int j = 0; j < 10; j++) {
                    if (i == x - 1 && j == y - 1) {
                        if(playBoard[i][j] == 'X'){
    //                        showBoard(fogPlayBoard);
                            System.out.println("\nYou hit a ship!  Try again:");
                            break;
                        }
                        if (playBoard[i][j]=='O') {
                            playBoard[i][j] = 'X';
                            fogPlayBoard[i][j]='X';
                            shipSinkBoard[i][j]='X';
    //                        showBoard(fogPlayBoard);
                            if(checkShip(shipSinkBoard) &&gameFinished) {
                                System.out.println("\nYou sank the last ship. You won. Congratulations!");
                                return;
                            }else if(checkShip(shipSinkBoard)){
                                System.out.println("\nYou sank a ship! Specify a new target:");
                                break;
                            }
                            else{
                                System.out.println("\nYou hit a ship!  Try again:");
                                break;}
                        } else {
                            playBoard[i][j] = 'M';
                            fogPlayBoard[i][j]='M';
    //                        showBoard(fogPlayBoard);
                            System.out.println("\nYou missed! Try again:");
                            break;
                        }
                    }
                }
            }
        }

        public void coordinateShip(String shipName, int l, char[][] playBoard) {
            Player1 ship=new Player1();
            System.out.println("\nEnter the coordinates of the "+shipName+" ("+(l+1)+" cells):");
            while(true) {
                int[] coordinates = findCoordinates();
                if (!checkLength(coordinates, l)){
                    System.out.println("Error! Wrong length of the "+shipName+"! Try again:");
                }
                else if (coordinates[0]!= coordinates[2]&& coordinates[1]!= coordinates[3]){
                    System.out.println("Error! Wrong ship location! Try again:");
                }
                else if (!checkClose(coordinates, playBoard)){
                    System.out.println("Error! You placed it too close to another one. Try again:");
                }
                else {
                    createPlayboard(playBoard, coordinates,shipName);
                    showBoard(playBoard);
                    break;
                }
            }
        }

        public static boolean checkClose(int [] coordinates, char [][] playboard){
            int x1=coordinates[0];
            int y1=coordinates[1];
            int x2=coordinates[2];
            int y2=coordinates[3];
            boolean check=true;
            for(int i=0;i<10;i++) {
                for (int j = 0; j < 10; j++) {
                    if(playboard[i][j]=='O'){
                        if((x1==x2&&i==x1-1&&j>=(y1-2)&&j<=(y2))||(x1==x2&&i==x1-1&&j<=(y1)&&j>=(y2-2))) {
                            check = false;
                            break;
                        }
                        else if((y1==y2&&j==y1-1&&i>=(x1-2)&&i<=(x2))||(y1==y2&&j==y1-1&&i<=(x1)&&i>=(x2-2))) {
                            check = false;
                            break;
                        } else if((x1==x2&&i==x1-2&&j>=(y1-1)&&j<=(y2-1))||(x1==x2&&i==x1-2&&j<=(y1-1)&&j>=(y2-1))) {
                            check = false;
                            break;
                        }else if((x1==x2&&i==x1&&j>=(y1-1)&&j<=(y2-1))||(x1==x2&&i==x1&&j<=(y1-1)&&j>=(y2-1))) {
                            check = false;
                            break;}
                        else if((y1==y2&&j==y1-2&&i>=(x1-1)&&i<=(x2-1))||(y1==y2&&j==y1-2&&i<=(x1-1)&&i>=(x2-1))) {
                            check = false;
                            break;
                        }else if((y1==y2&&j==y1&&i>=(x1-1)&&i<=(x2-1))||(y1==y2&&j==y1&&i<=(x1-1)&&i>=(x2-1))) {
                            check = false;
                            break;
                        }
                    }
                }
            }
            return check;
        }
        public  int[] findCoordinates() {
            Scanner scanner=new Scanner(System.in);
            String x1y1 = scanner.next();
            String x2y2 = scanner.next();
            coordinates[0] = Character.getNumericValue(x1y1.charAt(0)) - 9;
            coordinates[1] = Integer.parseInt(x1y1.substring(1));
            coordinates[2] = Character.getNumericValue(x2y2.charAt(0)) - 9;
            coordinates[3] = Integer.parseInt(x2y2.substring(1));
            return coordinates;
        }

        public void createPlayboard(char[][] playBoard, int[] coordinates, String shipName) {
            int x1=coordinates[0];
            int y1=coordinates[1];
            int x2=coordinates[2];
            int y2=coordinates[3];
            for(int i=0;i<10;i++) {
                for (int j = 0; j < 10; j++) {
                    if(((x1-1)==i&&(x2-1)==i&&j>=(y1-1)&&j<=(y2-1))||((x1-1)==i&&(x2-1)==i&&j<=(y1-1)&&j>=(y2-1))) {
                        playBoard[i][j] = 'O';
                        switch (shipName){
                            case "Aircraft Carrier":
                                shipSinkBoard[i][j]='A';
                                break;
                            case "Battleship":
                                shipSinkBoard[i][j]='B';
                                break;
                            case "Submarine":
                                shipSinkBoard[i][j]='C';
                                break;
                            case "Cruiser":
                                shipSinkBoard[i][j]='D';
                                break;
                            case "Destroyer":
                                shipSinkBoard[i][j]='E';
                                break;
                        }
                    } else if(((y1-1)==j&&(y2-1)==j&&i>=(x1-1)&&i<=(x2-1))||((y1-1)==j&&(y2-1)==j&&i<=(x1-1)&&i>=(x2-1))) {
                        playBoard[i][j] = 'O';
                        playBoard[i][j] = 'O';
                        switch (shipName){
                            case "Aircraft Carrier":
                                shipSinkBoard[i][j]='A';
                                break;
                            case "Battleship":
                                shipSinkBoard[i][j]='B';
                                break;
                            case "Submarine":
                                shipSinkBoard[i][j]='C';
                                break;
                            case "Cruiser":
                                shipSinkBoard[i][j]='D';
                                break;
                            case "Destroyer":
                                shipSinkBoard[i][j]='E';
                                break;
                        }
                    }else if(playBoard[i][j]=='O') {
                        continue;
                    }
                    else {
                        playBoard[i][j] = '~';
                    }
                }
            }
        }
        public static void showBoard(char [][] playBoard) {
            System.out.print("  ");
            for (int i = 1; i <= 10; i++)
                System.out.print(i + " ");

            for (int i = 0; i < 10; i++) {
                System.out.print("\n" + (char) ('A' + i) + " ");
                for (int j = 0; j < 10; j++) {
                    System.out.print(playBoard[i][j] + " ");
                }
            }
        }

        public char[][] getPlayBoard() {
            return playBoard;
        }

        public char[][] getFogPlayBoard() {
            return fogPlayBoard;
        }
        public int[] getCoordinates() {
            return coordinates;
        }
    }



  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/667/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 03 Apr 2021 16:41:57 UTC
record: 5
